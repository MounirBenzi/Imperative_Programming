#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>
#include <limits.h>
#include <errno.h>

void printBin(char binary[], int numBits){
  for (int i = 0; i < numBits; i++){
    //printf("THE %d\n", binary[0]);
    printf("%d", binary[i]);
  }
  printf("\n");
}

void binToHex(char binary[]){
  int value = (int)strtol(binary, NULL, 2);
  char hexString[32];
  sprintf(hexString, "%x\n", value);
  printf(hexString);
}

void twosCompliment(char binary[], int numBits){
  int i =0, adding =1;
  for(i = 0; i < numBits; i++){
    if (binary[i] == 1){
      binary[i] = 0;
    }
    else {
      binary[i] = 1;
    }
  }
  printf("Ones Compliment: ");
  printBin(binary, numBits);
  for (i = numBits-1; i >= 0; i--){
    if(binary[i] == 1 && adding == 1){
      binary[i] = 0;
    }
    else if (binary[i] == 0 && adding == 1){
      binary[i] = 1;
      adding = 0;
    }
    else{
      binary[i] = binary[i];
    }
  }
  printf("Twos Compliment: ");
  printBin(binary, numBits);
}

bool checkNeg(long numToCheck){
  //printf("CASD %ld", numToCheck);
  if(numToCheck < 0){
    return true;
  }
  else{
    return false;
  }
}


void decToBin(char buffer[], long numToConvert){
  long numTemp = numToConvert;
  char remainder = 0;
  for(int i = 0; numTemp != 0; i++){
    remainder = numTemp%2;
    numTemp = numTemp/2;
    buffer[i] = remainder;
  }
}

void flipArr(char buffer[], char binary[], int numBits){
  int temp = 0;
  for (int i = numBits-1; i >= 0; i--){
    binary[temp] = buffer[i];
    temp++;
  }
}

int convertChar(const char length[]){
  char buffer[CHAR_BIT] = {0}, binary[CHAR_BIT] = {0}, inputChar = 0,
       remainder=0, *endptr;
  //int temp = 0;
  //converts strings to a long data type and checks for overflow
  long long_val = strtol(length, &endptr, 10);
  if (*endptr != '\0' || long_val < CHAR_MIN || long_val > CHAR_MAX){
      return -1;
  }
  bool isNeg = checkNeg(long_val);
  inputChar = (char)long_val;
  if (isNeg){
    long_val = long_val * -1;
  }
  decToBin(buffer, long_val);
  flipArr(buffer, binary, CHAR_BIT);
  printf("%d binary digits: ", inputChar);
  printBin(binary, CHAR_BIT);
  if (isNeg){
    twosCompliment(binary, CHAR_BIT);
  }
  return 0;
}

int convertInt(const char length[]){
  /*int IntBit = sizeof(int)*CHAR_BIT;
  char buffer[32] = {0}, binary[32] = {0}, *endptr;
  int temp = 0 ,remainder = 0;
  long inputChar = 0, c = 0;*/
  int IntBit = sizeof(int)*CHAR_BIT;
  char buffer[32] = {0}, binary[32] = {0}, inputChar = 0,
       remainder=0, *endptr;
  //int temp = 0;
  //converts strings to a long data type and checks for overflow
  long long_val = strtol(length, &endptr, 10);
  if (*endptr != '\0' || long_val < INT_MIN || long_val > INT_MAX){
      return -1;
  }
  bool isNeg = checkNeg(long_val);
  inputChar = (int)long_val;
  if (isNeg){
    long_val = long_val * -1;
  }
  decToBin(buffer, long_val);
  flipArr(buffer, binary, IntBit);
  printf("%d binary digits: ", inputChar);
  printBin(binary, IntBit);
  if (isNeg){
    twosCompliment(binary, IntBit);
  }
  return 0;
}
/*
  //converts strings to a long data type and checks for overflow
  long long_val = strtol(length, &endptr, 10);
  if (*endptr != '\0' || long_val <= INT_MIN || long_val > INT_MAX){
      return -1;
  }
  bool isNeg = checkNeg(long_val);
  inputChar = (int)long_val;
  if (isNeg){
    inputChar = inputChar * -1;
  }
  c = inputChar;
  for(int location = 0; c != 0; location++){
    //printf("%d TEST %d\n", c, remainder);
    remainder = c%2;
    c = c/2;
    buffer[location] = remainder;

  }
  for (int j = IntBit-1; j >= 0; j--){
    binary[temp] = buffer[j];
    temp++;
  }
    binToHex(binary);
  printf("%ld binary digits: ", inputChar);
  printBin(binary, IntBit);
  if (isNeg){
    twosCompliment(binary, IntBit);
  }
  return inputChar;
}*/

int convertLong(const char length[]){
  int longBit = sizeof(long)*CHAR_BIT;
  char buffer[64] = {0}, binary[64] = {0}, *endptr;
  int temp = 0, remainder = 0;
  long c = 0;
  //converts strings to a long data type and checks for overflow
  long inputChar = strtol(length, &endptr, 10);
  if (*endptr != '\0' || inputChar < LONG_MIN || inputChar > LONG_MAX){
      return -1;
  }
  bool isNeg = checkNeg(inputChar);
  if (isNeg){
    inputChar = inputChar * -1;
  }
  c = inputChar;
  for(int location = 0; c != 0; location++){
    remainder = c%2;
    c = c/2;
    buffer[location] = remainder;
  }
  for (int j = longBit-1; j >= 0; j--){
    binary[temp] = buffer[j];
    temp++;
  }
  printf("%ld binary digits: ", inputChar);
  printBin(binary, 64);
  if (isNeg){
    twosCompliment(binary, longBit);
  }
  return inputChar;
}

char typeToConvert(char type[], const char length[]){
  char str[10];
  memcpy(str, type, 8);
  str[8] = '\0';
  if (strcmp(str, "char") == 0){
    convertChar(length);
  }
  else if (strcmp(str, "int") == 0){
    convertInt(length);
  }
  else if (strcmp(str, "long") == 0){
    convertLong(length);
  }
  else {
    printf("Type is either invalid or not supported, see readme.txt");
  }
  return 0;
}

int main(int n, char *args[n]){
  if (n == 3){
    typeToConvert(args[1], args[2]);
  }
  else{
    fprintf(stderr, "Use e.g.: ./visualise char 7");
    exit(1);
  }

}
